{"version":3,"sources":["components/ListComponents/Card.js","components/ListComponents/List.js","components/Dashboard.js","components/Home.js","reduxManager.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","data","map","i","index","ListGroupItem","key","toString","connect","state","lists","dispatch","addCard","item","type","payload","cardItem","useState","setItem","card","cards","handleClick","style","padding","textAlign","color","backgroundColor","borderRadius","span","InputGroup","marginTop","Input","onChange","e","target","value","onKeyPress","placeholder","InputGroupAddon","addonType","InputGroupText","onClick","addList","listItem","Header","Layout","Content","height","id","display","flexWrap","overflowX","overflowY","alignItems","className","ListGroup","List","list","width","margin","marginRight","Home","initialState","store","createStore","action","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.438442a9.chunk.js","sourcesContent":["import React from 'react';\nimport { ListGroupItem } from 'reactstrap';\n\nexport const Card = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t{props.data.map((i, index) => {\n\t\t\t\treturn <ListGroupItem key={index.toString()}>{i}</ListGroupItem>;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { Col } from 'antd';\n\nimport Card from './Card';\n\nexport const AList = (props) => {\n\tconst [ item, setItem ] = useState('');\n\n\tconst { lists, index, data } = props;\n\tlet card = <Card data={lists[index].cards} />;\n\n\tconst handleClick = () => {\n\t\tprops.addCard(item, index);\n\t\tsetItem('');\n\t};\n\n\tconst handleKeyPress = (e) => {\n\t\tif (e.key === 'Enter') return handleClick();\n\t};\n\n\treturn (\n\t\t<span\n\t\t\tstyle={{\n\t\t\t\tpadding: '20px',\n\t\t\t\ttextAlign: 'start',\n\t\t\t\tcolor: '#333333',\n\t\t\t\tbackgroundColor: '#73C9C3',\n\t\t\t\tborderRadius: '5px'\n\t\t\t}}\n\t\t>\n\t\t\t<p style={{ color: '#333333' }}>{data}</p>\n\t\t\t<Col span={8}>\n\t\t\t\t{card}\n\t\t\t\t<InputGroup style={{ marginTop: '10px' }}>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tonChange={(e) => setItem(e.target.value)}\n\t\t\t\t\t\tonKeyPress={handleKeyPress}\n\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\tplaceholder=\"Add a Card\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<InputGroupAddon addonType=\"append\">\n\t\t\t\t\t\t<InputGroupText onClick={handleClick}>+</InputGroupText>\n\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t</InputGroup>\n\t\t\t</Col>\n\t\t</span>\n\t);\n};\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tlists: state.lists\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\taddCard: (item, index) =>\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_CARD',\n\t\t\t\tpayload: {\n\t\t\t\t\tcardItem: item,\n\t\t\t\t\tindex\n\t\t\t\t}\n\t\t\t})\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AList);\n","import React, { useState } from 'react';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, ListGroup } from 'reactstrap';\nimport { Col, Row, Layout } from 'antd';\n\nimport { connect } from 'react-redux';\nimport List from './ListComponents/List';\nimport '../App.css';\nimport './Dashboard.css';\n\nexport const Dashboard = (props) => {\n\tconst [ item, setItem ] = useState('');\n\tconst { Header, Content } = Layout;\n\n\tconst lists = props.lists;\n\n\tconst handleClick = () => {\n\t\tif (item !== '') {\n\t\t\tprops.addList(item);\n\t\t\tsetItem('');\n\t\t}\n\t};\n\n\tconst handleKeyPress = (e) => {\n\t\tif (e.key === 'Enter') return handleClick();\n\t};\n\n\treturn (\n\t\t<Layout>\n\t\t\t<Header>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{/* Add a Title Bar here */}</Col>\n\t\t\t\t</Row>\n\n\t\t\t\t<Col>NavBar</Col>\n\t\t\t\t<Row />\n\t\t\t</Header>\n\t\t\t<Content style={{ height: '100%' }}>\n\t\t\t\t<div\n\t\t\t\t\tid=\"Content\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexWrap: 'nowrap',\n\t\t\t\t\t\toverflowX: 'auto',\n\t\t\t\t\t\toverflowY: 'hidden',\n\t\t\t\t\t\talignItems: 'stretch',\n\t\t\t\t\t\theight: '100%'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{lists.map((i, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Col className=\"lists\" key={index.toString()}>\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t<List data={i.list} index={index} />\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<InputGroup style={{ width: '250px', height: '38px', margin: '20px', marginRight: '50px' }}>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tstyle={{ width: '80%' }}\n\t\t\t\t\t\t\t\tonChange={(e) => setItem(e.target.value)}\n\t\t\t\t\t\t\t\tonKeyPress={handleKeyPress}\n\t\t\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\t\t\tplaceholder=\"Add a list\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<InputGroupAddon style={{ width: '20%' }} addonType=\"append\">\n\t\t\t\t\t\t\t\t<InputGroupText onClick={handleClick}>+</InputGroupText>\n\t\t\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br />\n\t\t\t</Content>\n\t\t</Layout>\n\t);\n};\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tlists: state.lists\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\taddList: (item) =>\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_LIST',\n\t\t\t\tpayload: {\n\t\t\t\t\tlistItem: item\n\t\t\t\t}\n\t\t\t})\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React from 'react';\nimport Dashboard from './Dashboard';\n\nexport const Home = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Dashboard />\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import { createStore } from 'redux';\n\nconst initialState = {\n\tlists: []\n};\n\nconst load = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_LIST':\n\t\t\tlet list = { list: action.payload.listItem, cards: [] };\n\t\t\treturn { ...state, lists: [ ...state.lists, list ] };\n\n\t\tcase 'ADD_CARD':\n\t\t\tstate.lists[action.payload.index].cards = [\n\t\t\t\t...state.lists[action.payload.index].cards,\n\t\t\t\taction.payload.cardItem\n\t\t\t];\n\t\t\treturn { ...state };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst store = createStore(load);\n\nexport default store;\n","import React from 'react';\nimport Home from './components/Home';\nimport store from './reduxManager';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Provider store={store}>\n\t\t\t\t<Home />\n\t\t\t</Provider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}