{"version":3,"sources":["components/Task.js","components/Columns.js","components/Dashboard.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","key","task","id","index","draggableId","provided","className","draggableProps","dragHandleProps","ref","innerRef","content","type","onClick","deleteTask","columnId","DragArea","styled","div","DropArea","Column","useState","taskVisibility","setTaskVisibility","setTask","addTask","length","column","style","padding","margin","textAlign","paddingLeft","title","deleteColumn","droppableId","droppableProps","tasks","map","placeholder","onChange","e","target","value","onKeyPress","autoFocus","Dashboard","task1","task2","task3","task4","task5","task6","setTasks","column1","taskIds","column2","column3","column4","columns","setColumns","columnOrder","setColumnOrder","columnTitle","setColumnTitle","titleVisibility","setTitleVisibility","changeTitleVisibility","addColumn","newReference","columnOrderLength","parseInt","newColumn","taskLength","Object","keys","newTask","newTaskIds","newTasks","taskObject","indexOf","splice","newColumnsObject","newColumnOrder","filter","newColumns","columnObject","onDragStart","result","onDragUpdate","onDragEnd","source","destination","Array","from","start","finish","newStartTaskIds","newStart","newFinishTaskIds","newFinish","direction","Header","Layout","Content","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.422f8acd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Icon } from 'antd';\r\n\r\nconst Task = (props) => {\r\n\treturn (\r\n\t\t<Draggable key={props.task.id} index={props.index} draggableId={props.task.id}>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"task\"\r\n\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.task.content}\r\n\t\t\t\t\t<Icon type=\"delete\" onClick={() => props.deleteTask(props.task.id, props.columnId)} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Button, Input, Icon } from 'antd';\r\nimport Task from './Task';\r\nimport styled from 'styled-components';\r\n\r\nconst DragArea = styled.div``;\r\nconst DropArea = styled.div``;\r\n\r\nconst Column = (props) => {\r\n\tconst [ taskVisibility, setTaskVisibility ] = useState(false);\r\n\tconst [ task, setTask ] = useState('');\r\n\r\n\tconst addTask = () => {\r\n\t\tif (task.length > 0) {\r\n\t\t\tprops.addTask(props.column.id, task);\r\n\t\t\tsetTaskVisibility(!taskVisibility);\r\n\t\t\tsetTask('');\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<Draggable draggableId={props.column.id} index={props.index}>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<DropArea>\r\n\t\t\t\t\t<div className=\"all-tasks\" {...provided.draggableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t<p\r\n\t\t\t\t\t\t\tstyle={{ padding: '8px', margin: '0px', textAlign: 'left', paddingLeft: '24px' }}\r\n\t\t\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{props.column.title}{' '}\r\n\t\t\t\t\t\t\t<Icon type=\"delete\" onClick={() => props.deleteColumn(props.column.id)} />\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<Droppable droppableId={props.column.id} type=\"task\">\r\n\t\t\t\t\t\t\t{(provided) => (\r\n\t\t\t\t\t\t\t\t<div className=\"task-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t\t\t\t{props.tasks.map((task, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<Task\r\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\t\t\t\ttask={task}\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteTask={props.deleteTask}\r\n\t\t\t\t\t\t\t\t\t\t\tcolumnId={props.column.id}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Droppable>\r\n\t\t\t\t\t\t<div className=\"task-add-button\">\r\n\t\t\t\t\t\t\t{!taskVisibility ? (\r\n\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={setTaskVisibility}>\r\n\t\t\t\t\t\t\t\t\tAdd Card\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<DragArea className=\"title-input add-card-button\">\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"title\"\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTask(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (e.key === 'Enter') addTask();\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={addTask}>\r\n\t\t\t\t\t\t\t\t\t\t\tEnter title\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t<Icon onClick={() => setTaskVisibility(!taskVisibility)} type=\"close-circle\" />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</DragArea>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DropArea>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default Column;\r\n","import React, { useState } from 'react';\r\nimport Column from './Columns';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { Button, Input, Icon } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst Dashboard = () => {\r\n\tconst [ tasks, setTasks ] = useState({\r\n\t\ttask1: {\r\n\t\t\tid: 'task1',\r\n\t\t\tcontent: 'content1'\r\n\t\t},\r\n\t\ttask2: {\r\n\t\t\tid: 'task2',\r\n\t\t\tcontent: 'content2'\r\n\t\t},\r\n\t\ttask3: {\r\n\t\t\tid: 'task3',\r\n\t\t\tcontent: 'content3'\r\n\t\t},\r\n\t\ttask4: {\r\n\t\t\tid: 'task4',\r\n\t\t\tcontent: 'content4'\r\n\t\t},\r\n\t\ttask5: {\r\n\t\t\tid: 'task5',\r\n\t\t\tcontent: 'content5'\r\n\t\t},\r\n\t\ttask6: {\r\n\t\t\tid: 'task6',\r\n\t\t\tcontent: 'content6'\r\n\t\t}\r\n\t});\r\n\r\n\tconst [ columns, setColumns ] = useState({\r\n\t\tcolumn1: {\r\n\t\t\tid: 'column1',\r\n\t\t\ttitle: 'To Do',\r\n\t\t\ttaskIds: [ 'task1', 'task2', 'task3', 'task4', 'task5', 'task6' ]\r\n\t\t},\r\n\t\tcolumn2: {\r\n\t\t\tid: 'column2',\r\n\t\t\ttitle: 'InProgress',\r\n\t\t\ttaskIds: []\r\n\t\t},\r\n\t\tcolumn3: {\r\n\t\t\tid: 'column3',\r\n\t\t\ttitle: 'Completed',\r\n\t\t\ttaskIds: []\r\n\t\t},\r\n\t\tcolumn4: {\r\n\t\t\tid: 'column4',\r\n\t\t\ttitle: 'Completed',\r\n\t\t\ttaskIds: []\r\n\t\t}\r\n\t});\r\n\r\n\tconst [ columnOrder, setColumnOrder ] = useState([ 'column1', 'column2', 'column3', 'column4' ]);\r\n\tconst [ columnTitle, setColumnTitle ] = useState('');\r\n\tconst [ titleVisibility, setTitleVisibility ] = useState(false);\r\n\r\n\tconst onDragStart = (result) => {};\r\n\tconst onDragUpdate = (result) => {};\r\n\tconst onDragEnd = (result) => {\r\n\t\tconst { source, destination, draggableId, type } = result;\r\n\t\t// if there is no destination\r\n\t\tif (!destination) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if the drag start and end in same place\r\n\t\tif (source.droppableId === destination.droppableId && source.index === destination.index) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type === 'column') {\r\n\t\t\tconst newColumnOrder = Array.from(columnOrder);\r\n\t\t\tnewColumnOrder.splice(source.index, 1);\r\n\t\t\tnewColumnOrder.splice(destination.index, 0, draggableId);\r\n\t\t\tsetColumnOrder(newColumnOrder);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = columns[source.droppableId];\r\n\t\tconst finish = columns[destination.droppableId];\r\n\r\n\t\t// For drag between a single column\r\n\t\tif (start === finish) {\r\n\t\t\t// creating a new column\r\n\t\t\tconst column = columns[source.droppableId];\r\n\t\t\t// creating new taskIds\r\n\t\t\tconst newTaskIds = column.taskIds;\r\n\t\t\tnewTaskIds.splice(source.index, 1);\r\n\t\t\tnewTaskIds.splice(destination.index, 0, draggableId);\r\n\t\t\t// creating new Column to avoid mutation\r\n\t\t\t// changing a single column to persist all the remaining properties\r\n\t\t\tconst newColumn = {\r\n\t\t\t\t...column,\r\n\t\t\t\ttaskIds: newTaskIds\r\n\t\t\t};\r\n\t\t\t// replacing the new column in the state\r\n\t\t\tsetColumns({\r\n\t\t\t\t...columns,\r\n\t\t\t\t[newColumn.id]: newColumn\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// For drag and drop between multiple columns\r\n\t\tconst newStartTaskIds = Array.from(start.taskIds);\r\n\t\tnewStartTaskIds.splice(source.index, 1);\r\n\t\tconst newStart = {\r\n\t\t\t...start,\r\n\t\t\ttaskIds: newStartTaskIds\r\n\t\t};\r\n\r\n\t\tconst newFinishTaskIds = Array.from(finish.taskIds);\r\n\t\tnewFinishTaskIds.splice(destination.index, 0, draggableId);\r\n\t\tconst newFinish = {\r\n\t\t\t...finish,\r\n\t\t\ttaskIds: newFinishTaskIds\r\n\t\t};\r\n\r\n\t\tsetColumns({ ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });\r\n\t\treturn;\r\n\t};\r\n\r\n\tconst changeTitleVisibility = () => {\r\n\t\tsetTitleVisibility(!titleVisibility);\r\n\t};\r\n\r\n\tconst addColumn = () => {\r\n\t\t// To add a column, a columnOrder and a new Column should be created to map through the tasks\r\n\t\t// when a column title is added it needs to be stored in a object(id,title,taskIds)\r\n\t\t// a new Column object is created,it needs to be concatenate in the the columns array\r\n\t\tif (columnTitle.length > 0) {\r\n\t\t\t// writing new column id by not considering the deleted elements number\r\n\t\t\t// it is also considering the possibility of not having any columns\r\n\t\t\tconst newReference = columns ? columns[`column${columnOrder.length ? columnOrder.length : ''}`] : '';\r\n\t\t\tconst columnOrderLength = columnOrder.length ? parseInt(newReference.id[6]) : 0;\r\n\t\t\tconst column = `column${columnOrderLength + 1}`;\r\n\t\t\tconst newColumn = {\r\n\t\t\t\tid: column,\r\n\t\t\t\ttitle: columnTitle,\r\n\t\t\t\ttaskIds: []\r\n\t\t\t};\r\n\r\n\t\t\tsetColumnOrder([ ...columnOrder, newColumn.id ]);\r\n\t\t\tsetColumns({ ...columns, [newColumn.id]: newColumn });\r\n\t\t\tchangeTitleVisibility();\r\n\t\t\tsetColumnTitle('');\r\n\t\t}\r\n\t};\r\n\r\n\tconst addTask = (column, task) => {\r\n\t\t// adding taskIds in the respective column of the task\r\n\t\tconst columnId = columns[column];\r\n\t\tconst taskLength = Object.keys(tasks).length + 1;\r\n\t\tconst newTask = {\r\n\t\t\tid: `task${taskLength}`,\r\n\t\t\tcontent: task\r\n\t\t};\r\n\r\n\t\tconst newTaskIds = [ ...columnId.taskIds, [ newTask.id ] ];\r\n\t\tcolumnId.taskIds = newTaskIds;\r\n\t\tconst newColumn = { ...columns, [column]: columnId };\r\n\t\tsetColumns(newColumn);\r\n\r\n\t\t// creating a new task object to add in the task list object\r\n\t\tconst newTasks = { ...tasks, [newTask.id]: newTask };\r\n\t\tsetTasks(newTasks);\r\n\t};\r\n\r\n\tconst deleteTask = (task, column) => {\r\n\t\tconst newTasks = {};\r\n\t\t//Deleting a task\r\n\t\tObject.keys(tasks).map((taskObject) => {\r\n\t\t\tif (taskObject !== task) {\r\n\t\t\t\treturn (newTasks[taskObject] = tasks[taskObject]);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetTasks(newTasks);\r\n\r\n\t\t// removing its reference in columns object\r\n\t\tconst index = columns[column].taskIds.indexOf(task);\r\n\t\tconst newColumn = columns[column].taskIds.splice(index, 1);\r\n\t\tconst newColumnsObject = { ...columns, newColumn };\r\n\t\tsetColumns(newColumnsObject);\r\n\t};\r\n\r\n\tconst deleteColumn = (column) => {\r\n\t\tconst newColumnOrder = columnOrder.filter((columns) => columns !== column);\r\n\t\tsetColumnOrder(newColumnOrder);\r\n\r\n\t\t// making a new Column object and updating references\r\n\t\tconst newColumns = {};\r\n\t\tObject.keys(columns).map((columnObject) => {\r\n\t\t\tif (columnObject !== column) {\r\n\t\t\t\treturn (newColumns[columnObject] = columns[columnObject]);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetColumns(newColumns);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<DragDropContext onDragStart={onDragStart} onDragUpdate={onDragUpdate} onDragEnd={onDragEnd}>\r\n\t\t\t\t<Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n\t\t\t\t\t{(provided, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"all-columns\" {...provided.droppableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t\t\t{columnOrder.map((columnId, index) => {\r\n\t\t\t\t\t\t\t\t\tconst column = columns[columnId];\r\n\t\t\t\t\t\t\t\t\tconst task = column.taskIds.map((taskIds) => tasks[taskIds]);\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\t\tkey={column.id}\r\n\t\t\t\t\t\t\t\t\t\t\tcolumn={column}\r\n\t\t\t\t\t\t\t\t\t\t\ttasks={task}\r\n\t\t\t\t\t\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteTask={deleteTask}\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteColumn={deleteColumn}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{titleVisibility ? (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"title-input add-list-button\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setColumnTitle(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (e.key === 'Enter') addColumn();\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button onClick={addColumn} type=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tEnter title\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon onClick={changeTitleVisibility} type=\"close-circle\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<Button type=\"primary\" className=\"add-list\" onClick={changeTitleVisibility}>\r\n\t\t\t\t\t\t\t\t\t\t\tAdd List\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Droppable>\r\n\t\t\t</DragDropContext>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport { Layout } from 'antd';\r\nconst { Header, Content } = Layout;\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header className=\"header\">\r\n\t\t\t\t<h1 id=\"trello\">Trello</h1>\r\n\t\t\t</Header>\r\n\t\t\t<Content className=\"content\">\r\n\t\t\t\t<Dashboard />\r\n\t\t\t</Content>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Home from './components/Home';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Home />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}