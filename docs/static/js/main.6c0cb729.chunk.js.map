{"version":3,"sources":["components/Task.js","components/Columns.js","components/Dashboard.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","key","task","id","index","draggableId","provided","className","draggableProps","dragHandleProps","ref","innerRef","content","Column","useState","taskVisibility","setTaskVisibility","setTask","addTask","column","style","padding","margin","textAlign","paddingLeft","title","droppableId","type","droppableProps","tasks","map","onChange","e","target","value","onKeyPress","autoFocus","onClick","placeholder","Dashboard","task1","task2","task3","task4","task5","task6","setTasks","column1","taskIds","column2","column3","column4","columns","setColumns","columnOrder","setColumnOrder","columnTitle","setColumnTitle","titleVisibility","setTitleVisibility","changeTitleVisibility","addColumn","columnOrderLength","length","newColumn","columnId","taskLength","Object","keys","newTask","newTaskIds","newTasks","onDragStart","result","onDragUpdate","onDragEnd","source","destination","newColumnOrder","Array","from","splice","start","finish","newStartTaskIds","newStart","newFinishTaskIds","newFinish","direction","Header","Layout","Content","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c0cb729.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Task = (props) => {\r\n\treturn (\r\n\t\t<Draggable key={props.task.id} index={props.index} draggableId={props.task.id}>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"task\"\r\n\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.task.content}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Button, Input, Icon } from 'antd';\r\nimport Task from './Task';\r\n\r\nconst Column = (props) => {\r\n\tconst [ taskVisibility, setTaskVisibility ] = useState(false);\r\n\tconst [ task, setTask ] = useState('');\r\n\r\n\tconst addTask = () => {\r\n\t\tprops.addTask(props.column.id, task);\r\n\t\tsetTaskVisibility(!taskVisibility);\r\n\t};\r\n\treturn (\r\n\t\t<Draggable draggableId={props.column.id} index={props.index}>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<div className=\"all-tasks\" {...provided.draggableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tstyle={{ padding: '8px', margin: '0px', textAlign: 'left', paddingLeft: '24px' }}\r\n\t\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{props.column.title}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<Droppable droppableId={props.column.id} type=\"task\">\r\n\t\t\t\t\t\t{(provided) => (\r\n\t\t\t\t\t\t\t<div className=\"task-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t\t\t{props.tasks.map((task, index) => <Task key={index} index={index} task={task} />)}\r\n\t\t\t\t\t\t\t\t{!taskVisibility ? (\r\n\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={setTaskVisibility}>\r\n\t\t\t\t\t\t\t\t\t\tAdd a task\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTask(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (e.key === 'Enter') addTask();\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={addTask}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tEnter title\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => setTaskVisibility(!taskVisibility)}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"close-circle\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Droppable>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default Column;\r\n","import React, { useState } from 'react';\r\nimport Column from './Columns';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { Button, Input, Icon } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst Dashboard = () => {\r\n\tconst [ tasks, setTasks ] = useState({\r\n\t\ttask1: {\r\n\t\t\tid: 'task1',\r\n\t\t\tcontent: 'content1'\r\n\t\t},\r\n\t\ttask2: {\r\n\t\t\tid: 'task2',\r\n\t\t\tcontent: 'content2'\r\n\t\t},\r\n\t\ttask3: {\r\n\t\t\tid: 'task3',\r\n\t\t\tcontent: 'content3'\r\n\t\t},\r\n\t\ttask4: {\r\n\t\t\tid: 'task4',\r\n\t\t\tcontent: 'content4'\r\n\t\t},\r\n\t\ttask5: {\r\n\t\t\tid: 'task5',\r\n\t\t\tcontent: 'content5'\r\n\t\t},\r\n\t\ttask6: {\r\n\t\t\tid: 'task6',\r\n\t\t\tcontent: 'content6'\r\n\t\t}\r\n\t});\r\n\r\n\tconst [ columns, setColumns ] = useState({\r\n\t\tcolumn1: {\r\n\t\t\tid: 'column1',\r\n\t\t\ttitle: 'To Do',\r\n\t\t\ttaskIds: [ 'task1', 'task2', 'task3', 'task4', 'task5', 'task6' ]\r\n\t\t},\r\n\t\tcolumn2: {\r\n\t\t\tid: 'column2',\r\n\t\t\ttitle: 'InProgress',\r\n\t\t\ttaskIds: []\r\n\t\t},\r\n\t\tcolumn3: {\r\n\t\t\tid: 'column3',\r\n\t\t\ttitle: 'Completed',\r\n\t\t\ttaskIds: []\r\n\t\t},\r\n\t\tcolumn4: {\r\n\t\t\tid: 'column4',\r\n\t\t\ttitle: 'Completed',\r\n\t\t\ttaskIds: []\r\n\t\t}\r\n\t});\r\n\r\n\tconst [ columnOrder, setColumnOrder ] = useState([ 'column1', 'column2', 'column3', 'column4' ]);\r\n\tconst [ columnTitle, setColumnTitle ] = useState('');\r\n\tconst [ titleVisibility, setTitleVisibility ] = useState(false);\r\n\r\n\tconst onDragStart = (result) => {};\r\n\tconst onDragUpdate = (result) => {};\r\n\tconst onDragEnd = (result) => {\r\n\t\tconst { source, destination, draggableId, type } = result;\r\n\t\t// if there is no destination\r\n\t\tif (!destination) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if the drag start and end in same place\r\n\t\tif (source.droppableId === destination.droppableId && source.index === destination.index) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type === 'column') {\r\n\t\t\tconst newColumnOrder = Array.from(columnOrder);\r\n\t\t\tnewColumnOrder.splice(source.index, 1);\r\n\t\t\tnewColumnOrder.splice(destination.index, 0, draggableId);\r\n\t\t\tsetColumnOrder(newColumnOrder);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst start = columns[source.droppableId];\r\n\t\tconst finish = columns[destination.droppableId];\r\n\r\n\t\t// For drag between a single column\r\n\t\tif (start === finish) {\r\n\t\t\t// creating a new column\r\n\t\t\tconst column = columns[source.droppableId];\r\n\t\t\t// creating new taskIds\r\n\t\t\tconst newTaskIds = column.taskIds;\r\n\t\t\tnewTaskIds.splice(source.index, 1);\r\n\t\t\tnewTaskIds.splice(destination.index, 0, draggableId);\r\n\t\t\t// creating new Column to avoid mutation\r\n\t\t\t// changing a single column to persist all the remaining properties\r\n\t\t\tconst newColumn = {\r\n\t\t\t\t...column,\r\n\t\t\t\ttaskIds: newTaskIds\r\n\t\t\t};\r\n\t\t\t// replacing the new column in the state\r\n\t\t\tsetColumns({\r\n\t\t\t\t...columns,\r\n\t\t\t\t[newColumn.id]: newColumn\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// For drag and drop between multiple columns\r\n\t\tconst newStartTaskIds = Array.from(start.taskIds);\r\n\t\tnewStartTaskIds.splice(source.index, 1);\r\n\t\tconst newStart = {\r\n\t\t\t...start,\r\n\t\t\ttaskIds: newStartTaskIds\r\n\t\t};\r\n\r\n\t\tconst newFinishTaskIds = Array.from(finish.taskIds);\r\n\t\tnewFinishTaskIds.splice(destination.index, 0, draggableId);\r\n\t\tconst newFinish = {\r\n\t\t\t...finish,\r\n\t\t\ttaskIds: newFinishTaskIds\r\n\t\t};\r\n\r\n\t\tsetColumns({ ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });\r\n\t\treturn;\r\n\t};\r\n\r\n\tconst changeTitleVisibility = () => {\r\n\t\tsetTitleVisibility(!titleVisibility);\r\n\t};\r\n\r\n\tconst addColumn = () => {\r\n\t\t// To add a column, a columnOrder and a new Column should be created to map through the tasks\r\n\t\t// when a column title is added it needs to be stored in a object(id,title,taskIds)\r\n\t\t// a new Column object is created to concatenate in the the columns array\r\n\r\n\t\tconst columnOrderLength = columnOrder.length + 1;\r\n\t\tconst column = `column${columnOrderLength}`;\r\n\t\tconst newColumn = {\r\n\t\t\tid: column,\r\n\t\t\ttitle: columnTitle,\r\n\t\t\ttaskIds: []\r\n\t\t};\r\n\r\n\t\tsetColumnOrder([ ...columnOrder, newColumn.id ]);\r\n\t\tsetColumns({ ...columns, [newColumn.id]: newColumn });\r\n\t\tchangeTitleVisibility();\r\n\t};\r\n\r\n\tconst addTask = (column, task) => {\r\n\t\t// adding taskIds in the respective column of the task\r\n\t\tconst columnId = columns[column];\r\n\t\tconst taskLength = Object.keys(tasks).length + 1;\r\n\t\tconst newTask = {\r\n\t\t\tid: `task${taskLength}`,\r\n\t\t\tcontent: task\r\n\t\t};\r\n\r\n\t\tconst newTaskIds = [ ...columnId.taskIds, [ newTask.id ] ];\r\n\t\tcolumnId.taskIds = newTaskIds;\r\n\t\tconst newColumn = { ...columns, [column]: columnId };\r\n\t\tsetColumns(newColumn);\r\n\r\n\t\t// creating a new task object to add in the task list object\r\n\t\tconst newTasks = { ...tasks, [newTask.id]: newTask };\r\n\t\tsetTasks(newTasks);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<DragDropContext onDragStart={onDragStart} onDragUpdate={onDragUpdate} onDragEnd={onDragEnd}>\r\n\t\t\t\t<Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n\t\t\t\t\t{(provided) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"all-columns\" {...provided.droppableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t\t\t{columnOrder.map((columnId, index) => {\r\n\t\t\t\t\t\t\t\t\tconst column = columns[columnId];\r\n\t\t\t\t\t\t\t\t\tconst task = column.taskIds.map((taskIds) => tasks[taskIds]);\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Column\r\n\t\t\t\t\t\t\t\t\t\t\tkey={column.id}\r\n\t\t\t\t\t\t\t\t\t\t\tcolumn={column}\r\n\t\t\t\t\t\t\t\t\t\t\ttasks={task}\r\n\t\t\t\t\t\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{titleVisibility ? (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"title-input\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setColumnTitle(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (e.key === 'Enter') addColumn();\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button onClick={addColumn} type=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tEnter title\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon onClick={changeTitleVisibility} type=\"close-circle\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={changeTitleVisibility}>\r\n\t\t\t\t\t\t\t\t\t\t\tAdd a list\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Droppable>\r\n\t\t\t</DragDropContext>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport { Layout } from 'antd';\r\nconst { Header, Content } = Layout;\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header className=\"header\">\r\n\t\t\t\t<h1 id=\"trello\">Trello</h1>\r\n\t\t\t</Header>\r\n\t\t\t<Content className=\"content\">\r\n\t\t\t\t<Dashboard />\r\n\t\t\t</Content>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Home from './components/Home';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Home />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}